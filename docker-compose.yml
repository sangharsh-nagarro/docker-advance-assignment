services:
  redis:
    image: redis:7.4
    restart: unless-stopped
    hostname: redis
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    networks:
      - private

  mongodb:
    image: mongo:8.0
    restart: unless-stopped
    hostname: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongo-data:/data/db
    networks:
      - private
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 40s

  web-service:
    container_name: webservice
    hostname: webservice
    image: sangharshseth/docker-advanced-assignment:latest
    develop:
      watch:
        - action: rebuild
          path: ./
    ports:
      - "8080:8080"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - frontend
      - private
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  frontend:
    driver: bridge
  private:
    driver: bridge
    internal: true

volumes:
  redis-data:
  mongo-data: